

import torch
import torch.nn as nn
import torch.nn.functional as F

from helper import UpSampleBlock
from lpips import LPIPS

x = torch.randn(1,3,50,50)
# upsample block, doubles the size of the input
us = UpSampleBlock(channels = 3)
print(us(x).shape)

print(us(us(x)).shape)

#==============================>

x2 = torch.ones(1, 3,3)
print("x2", x2)

after_padding = F.pad(x2,(0,1,0,1), mode = "constant", value = 0)
print("after_padding", after_padding)

channels = 1
conv_layer = nn.Conv2d(channels, channels, 2, 2, 0)

after_conv = conv_layer(after_padding)
print("after_conv: this is half of the 4 by 4, because of padding", after_conv)

without_padding_after_conv = conv_layer(x2)
print("without_padding_after_conv, not half of 3 by 3", without_padding_after_conv)

l = LPIPS()
real = torch.randn(1, 3, 32,32)
fake = torch.randn(1, 3, 32,32)

print("l(real, fake).shape",l(real, fake).shape)